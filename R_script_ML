# -------------- Large-scale among-population variation in great tit gut microbiome -------------- #
#Liukkonen Martta et al. 2023

## Sequence processing was done with QIIME2 + DADA2 plugin using the protocols for the 16S rRNA V4 region parameters
## Sequences were assigned to taxa with SILVA v132 classifier

### The above two steps were done using the CSC IT Center for Science Puhti service

## The removal of contaminant sequences was done with decontam in R
## Dowsntream sequence analyses were done with phyloseq, ape, phangorn and decipher in R

# ------------- Code for data analysis to answer the research questions --------------- #

## Temperatures and precipitation is from European Climate Assessment & Dataset
### Klein Tank et al. (2002) Daily dataset of 20th-centurysurface air temperature and precipitation series for the European Climate Assessment, Intern. J. Climatol. 22:1441-1453. doi:10.1002/joc.773

#Download packages
library(BiocManager) ##so that things function
library(rmarkdown) ##to save and share script easily
library(devtools) 
library(lme4) ##linear models
library(lmerTest) ##test linear models
library(MASS) ##AIC stepwise backwards reduction for linear models
library(tidyverse)
library(dplyr)
library(car) ##anova testing
library(ape) ## phylogeny
library(ggpubr)
library(dendextend)
library(phyloseq) ##sequence downstream analyses
library(microbiome) ##microbiome analyses
library(DESeq2) ##beta diversity analyses
library(readr)
library(Hmisc)
library(tidyr)
library(ggplot2) ##plotting
library(forcats)
library(ggdist)
library(rcartocolor)
library(ggsignif)
library(ggpubr)
library(viridis) ##colours that are colour blind friendly
library(readxl) ##reading in excel files
library(vegan) ##beta diversity testing
library(DHARMa) ##model fit testing
library(modelr)
library(gridExtra)
library(ggbeeswarm) ##ggplot extension
library(GGally) ##check for covariance between factors that are in models

# Import QIIME2 generated files into R and combine into a phyloseq object

setwd("~/Desktop/popcor/")

#Import QIIME2 artifacts

SVs<-read_qza("table-final-clean_25_210_novaseq.qza")
#To access the actual data stored within the object, access the data as below:
SVs$data[1:5,1:5] #Each row denotes a sequence variant where in the actual text is the hash of the complete sequence
#Make phyloseq object by importing the QIIME2 artifacts into R using qiime2R package
metadata<-readr::read_tsv("Novaseq_metadata.tsv") #Import metadata
taxonomy<-read_qza("taxonomy-25_210_novaseq.qza") #Read taxonomy
taxonomy<-parse_taxonomy(taxonomy$data)
head(taxonomy)

#Create phyloseq object
ps<-qza_to_phyloseq(features = "table-final-clean_25_210_novaseq.qza", 
                    tree = "rooted-tree-25_210_novaseq.qza",
                    taxonomy = "taxonomy-25_210_novaseq.qza",
                    metadata = "Novaseq_metadata.tsv")
ps

# RUN DECONTAM
sample_data(ps)$is.neg <- sample_data(ps)$control_or_sample == "control"
contamdf.prev <- isContaminant(ps, method="prevalence", neg="is.neg")
table(contamdf.prev$contaminant)
head(which(contamdf.prev$contaminant))

# default threshold above is 0.1. I usually use 0.05 to be on the conservative side.
contamdf.prev05 <- isContaminant(ps, method="prevalence", neg="is.neg", threshold=0.05)
table(contamdf.prev05$contaminant)

#Make phyloseq object of presence-absence in negative controls
ps.neg <- prune_samples(sample_data(ps)$control_or_sample == "control", ps)
ps.neg.presence <- transform_sample_counts(ps.neg, function(abund) 1*(abund>0))
# Make phyloseq object of presence-absence in positive samples
ps.pos <- prune_samples(sample_data(ps)$control_or_sample == "sample", ps)
ps.pos.presence <- transform_sample_counts(ps.pos, function(abund) 1*(abund>0))
# combine dataframes of prevalence in positive and negative samples
df.pres <- data.frame(prevalence.pos=taxa_sums(ps.pos.presence), prevalence.neg=taxa_sums(ps.neg.presence),
                      contam.prev=contamdf.prev$contaminant)

#Next you download this dataframe to do some stuff manually. 
write.csv(df.pres, "ps_decontam.csv")

#You will have a dataframe with a column that said true or false. True means it is the ASV is a likely contaminant.
#NOTE! If the sequence processing has been done in QIIME2, the sequences have ID numbers instead of "normal" DNA code.
#now we remove those bad sequences from the phyloseq object

# Remove contaminants (N=61)
# These badTaxa are identified from the ps_decontam.cvs file labelled as TRUE

badTaxa = c( "8397b9e9f90e89a54e1f6acfc16e2f31",
             "6b38e1484786e62b68ddb88194b6d5a7",
             "ec4a40696cb699f92c49555f9d64b4c0",
             "6351e6ca9a3a5f30f4495e0c464755a0",
             "3686ee9f20214979406102a0020b8f0b",
             "60c90e05082556edac474e9aa3fc757e",
             "9a56241776a4b47b4a4865930eed9d59",
             "ac45dce4a2b37ac51992026ead8c7cca",
             "2352f6343b4c14139ce4f214dbbc1a90",
             "90fa23fccd909a85817ac98d46d15963",
             "cfa21c0cebb9d908e2a237945e20ac8f",
             "74906e4abc83770c5838604e25e70b5d",
             "4d78b69b42a6ec205f83e12f0ee89aaf",
             "91335ec15ed6ee23f67486b943559c4f",
             "28699416c0922cac60ff5c0a536cc0d1",
             "02fa5a5cdf9eeb35a5ceb253f677b8a5",
             "4d0a39993127ced2a627eb0387f682ce",
             "84271ac7113d60bd3bd275483d49c60d",
             "d49f7b8254c597ad71ab7810671e14cd",
             "ae5662ac740a7dec3e18a0f2c9db42c3",
             "0f8d1a9bf26751d9354af3481d68ff3b",
             "923a96fd1debbd811788f38a5f363a37",
             "cf517ed18d89a6a7af82bf0721b365ce",
             "e43dab75ace1d3868f6ba27a552234d5",
             "62bac09e075870197d2d4455d7631975",
             "bca37efa4ec1cb9a09da7eea12540125",
             "e10d3041caaf03f831a504bcd1d820a5",
             "bc139be0ff8e70aa68627a6751cb57b9",
             "dc4eb5ec953acbaa63c45210f7f352b4",
             "d9b4b9f02e86916d54b122c4b9358825",
             "ddb81fdd2901aa061a8d6ade48daf41b",
             "db1e1b1b4bb5752f3698931e04f60608",
             "ec7584d3784fc70c162606ace49f2630",
             "534e0307d15da2e561caf5769eff0366",
             "63c9a38f4b9e3e860c665cc8b3b11fd3",
             "7b962461dde85b07f5246f4ff12567f3",
             "726ee4a1f16dc2fef9a053465e6f181b",
             "ba7b92e5e032f840421bc33ac36c25bb",
             "2edcf14d699e0a457d15a0d4a8caa126",
             "26810017388f10a256232c78c0fda4d0",
             "0642b7fc20ece3ade770c94a18b33332",
             "fe2afaff3e3897b050d36efc707f88a1",
             "6b57968b9a85819244157574fd85ce0e",
             "24910f4ebfc70bb8e1dc43d207b8baec",
             "e81417c9b0f891f7217b699828085d51",
             "bfd4afaffeb4d03f9ef0be59ac17be9c",
             "7e1e7a5acc9c4c0fe2b0f6dad2ce73c4",
             "0d919dad042fb85e7e89df332546e5b6",
             "827c05823efb09ef42e6e444a7998207",
             "45586716398bf0a1eb30d93b9e908845",
             "d43797c767908914504cb7637d4f2757",
             "e13ea3046188f45d6c66ff4d9319962b",
             "02f01d93a5fdb316db7861d8c865b853",
             "edc2c88d66e156e36cbd648207f392bd",
             "4c095b864eb425a692385c55416823c2",
             "74bd8dd5f95283238b4bc8b2777dbe81",
             "1765da13161b23fc92f9a6df4f1a80a5",
             "5df9f76ef4b64489f0a6f776b4d05792",
             "a3c58c700733761d92e973bb2194f6de",
             "6e2d8a4dc9fb4ea123accb37580db227",
             "07fbefa56427a3a1e396d58fd90bb102")

# new phyloseq object without the contaminants.
allTaxa = taxa_names(ps)
allTaxa <- allTaxa[!(allTaxa %in% badTaxa)]
ps_new = prune_taxa(allTaxa, ps)
ps_new

# ----------------- DONE DECONTAM -------------------- ##

### Check that all is ok with the phyloseq object

mean(sample_sums(ps))
sd(sample_sums(ps))

## Remove test samples
physeq <- subset_samples(ps, adult_or_chick == "adult")
physeq ### Gives a summary of the phyloseq object
sort(sample_sums(physeq))
mean(sample_sums(physeq))
summarize_phyloseq(physeq) ### Gives a more detailed summary of the phyloseq object

##Less than 100 ASVs -->  they can be contaminants so we usually remove these ASVs from the dataset
physeq <- prune_samples(sample_sums(physeq) >= 100, physeq)

mdata = as(sample_data(physeq), "data.frame") ### Makes metadata file
attach(mdata) ### Inserts metadata file

# List unique phylum level groups
head(get_taxa_unique(physeq, "Phylum"))

# Plot the samples to see problems
hist(sample_sums(physeq), main="Histogram: Read Counts", xlab="Reads ", 
     border="blue", col="green", las=1, breaks=12)
# Absolute abundances
asv.absolute <- abundances(physeq)
# Relative abundances
asv.relative <- abundances(physeq, "compositional")
# Total read counts
reads_sample <- readcount(physeq)
# Adding read per sample to phyloseq object metadata
sample_data(physeq)$reads_sample <- reads_sample
# Melting phyloseq data for easier plotting
# psmelt combines your metadata with bacterial taxa
ps_melt <- psmelt(physeq)
kable(head(ps_melt))

#Optional to save
write.table(ps_melt, "~/Desktop/melt.tsv") #### This can be a massive file so may take long!
# Sample names and variables
head(sample_names(physeq))
s <- sample_sums(physeq)

# Calculate diversity for samples
div <- microbiome::alpha(physeq, index = "shannon")
# Assign the estimated diversity to sample metadata
sample_data(physeq)$diversity <- div
# Number of taxa
n <- ntaxa(physeq)
# Most abundant taxa
topx <- top_taxa(physeq, n = 10)
# Names
ranks <- rank_names(physeq)
taxaASV <- taxa(physeq)
# List unique phylum level groups
head(get_taxa_unique(physeq, "Phylum"))

metadata = as(sample_data(physeq), "data.frame")
attach(metadata)

richness <- estimate_richness(physeq, measures=c("Observed", "Chao1", "Shannon", "ACE", "Simpson", "InvSimpson"))
# Combine richness with sample data
richness <- data.frame(richness, sample_data(physeq))

#Phyloseq object is 'physeq'
#Metadata is 'richness'

### Save richness as new datasheet and import again because the numeric variables go to shit with the R made dataframe
write_xlsx(richness,"~/Desktop/popcor/betadata.xlsx")

# ---------------- RAREFACTION ----------------- #

## First, plot the rarefaction curves
asv_tab <- t(abundances(physeq))
curves <- vegan::rarecurve(asv_tab, step=20, label = FALSE, sample = min(rowSums(asv_tab), col = "blue", cex = 0.5))

### Most plateau at level 1000, so choosing 1000 as depth
physeq_rare = rarefy_even_depth(physeq, sample.size =1000)
#### Removed 8 samples that were under 1000 reads: GT_186, GT_187, GT_24, GT_282, GT_304, GT_324, GT_48, GT_7
#### 8472 ASVs removed because they are no longer present in any sample after random subsampling

## Update metadata for rarefied dataset
metadata_rare = as(sample_data(physeq_rare), "data.frame")
attach(metadata_rare)

metadata_rare <- estimate_richness(physeq_rare, measures=c("Observed", "Chao1", "Shannon", "ACE", "Simpson", "InvSimpson"))
## Combine richness with sample data
metadata_rare <- data.frame(metadata_rare, sample_data(physeq_rare))
## Save file
write_xlsx(metadata_rare,"~/Desktop/rarefied_metadata.xlsx")
### Read in for correct variable conversions

ps_melt <- psmelt(physeq_rare)

phyloGlom = tax_glom(physeq_rare, "Phylum")
glomTax = tax_table(phyloGlom)[,"Phylum"]
glomOTU = otu_table(phyloGlom)
glomTable = merge(glomOTU,glomTax,by=0,all=TRUE)
rownames(glomTable) = glomTable[,"Phylum"]
glomTable$Row.names = NULL
glomTable$Phylum = NULL

glomTable2 = glomTable / rep(colSums(glomTable), each = nrow(glomTable)) ### percentages per column
glomTable3 = as.data.frame(t(glomTable2))
ggplot(glomTable3,aes(Bacteroidetes, Firmicutes)) + 
  theme_bw() +
  geom_point(size=2)

summarize_phyloseq(physeq_rare)

ps1.rel <- microbiome::transform(physeq, "compositional") # transform to relative abundance
p <- plot_taxa_cv(ps1.rel)

otu_table_ps1<-as.data.frame(physeq@otu_table)
#### Making a tree file
treefile_p1 <- read.tree("~/Desktop/popcor/tree.nwk")
df.pd<-pd(t(otu_table_ps1), treefile_p1, include.root=F)
datatable(df.pd)
richness$phylogenetic_diversity<-df.pd$PD
plot.pd<-ggplot(richness, aes(region, phylogenetic_diversity))+
  geom_boxplot()+geom_point(size=2)+
  theme_bw()

### Make a subset for top phyla to plot and check how the top phyla vary across your chosen variable
r_top_phyla <- subset_taxa(physeq_rare, 
                           Phylum=="Firmicutes" | Phylum=="Proteobacteria" | Phylum=="Actinobacteria" | 
                             Phylum=="Bacteroidetes" | Phylum=="Verrucomicrobia" | Phylum=="Tenericutes" | 
                             Phylum=="Chloroflexi" | Phylum=="Cyanobacteria" | Phylum=="Planctomycetes" | 
                             Phylum=="Dependentiae" | Phylum=="Chlamydiae")

abundance_positions<-c("La Hiruela", "Budapest region", "Westerheide", "Lund", "Tartu region", "Turku", "Jyvaskyla", "Oulu")
plot_richness(physeq_rare, x="region_factor", measures=c("Shannon", "Chao1")) + geom_boxplot() + 
  theme(panel.background = element_rect(color="black",fill = "white"),panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
  scale_x_discrete(limits=abundance_positions)


## ---------------- PLOT TREE ----------------- ##

### The idea is to look if the samples within a treatment "cluster" together or if they are random in the tree

bray_all <- phyloseq::distance(physeq_rare, method = "bray")
tree_microbiome_bray_all <- upgma(bray_all)
write.tree(tree_microbiome_bray_all, file="bray_tree_newick") #I always save the tree file too

x <- read.tree("~/Desktop/popcor/tree.nwk")
tipcategories = raredata
#tipcategories = read.csv("~/Desktop/popcor/richness.csv", sep = ";",header=TRUE,stringsAsFactors = FALSE) #think you can also just use the metadata_rarefied object that you already have
p <- ggtree(x,layout="circular") %<% tipcategories 
p + geom_tippoint(aes(color = region_factor, shape=region_factor, na.rm = TRUE), size=3) + theme(legend.position = "right")+
  scale_colour_viridis_d() +
  theme_tree2(legend.position='right')
p


# ----------------- NEXT statistical tests to analyse our research questions ------------------- #

## Read files into R if they are not in R yet
raredata <- read_excel("raredata.xlsx", col_types = c("text", 
                                                      "numeric", "numeric", "numeric", "numeric", 
                                                      "numeric", "numeric", "numeric", "numeric", 
                                                      "text", "text", "numeric", "text", "text", 
                                                      "text", "numeric", "numeric", "text", 
                                                      "numeric", "numeric", "text", "text", 
                                                      "text", "text", "text", "text", "numeric", 
                                                      "numeric", "date", "text", "text", "numeric", 
                                                      "numeric", "numeric"))

raredata$sample_names<- factor(raredata$sample_names)
raredata$population<- factor(raredata$population)
raredata$season<- factor(raredata$season)
raredata$age<- factor(raredata$age)
raredata$diet<- factor(raredata$diet)
raredata$habitat<- factor(raredata$habitat)
raredata$sex<- factor(raredata$sex)

## ------------------ ALPHA DIVERSITY ------------------ ##

###Calculate body condition for condition estimate
rare_index<-lm(weight ~ wing, data=raredata) ####extract individual residuals and use instead of weight
summary(rare_index) #Prints rediduals per birdID
###Extract residuals
rare_res<-rare_index$residuals
plot(fitted(rare_index), rare_res)
abline(0,0)
raredata<-add_residuals(raredata, rare_index, var="body_condition") #### Adds residuals to dataframe. Requires modelr package !

### Subset per season for further analyses
rarewinter<-subset(raredata, raredata$season == "winter")
raresummer<-subset(raredata, raredata$season == "summer")

## Model 1: Season and population
fit1<-lm(Shannon ~ season + population, data=both_seasons)
vif(fit1)
summary(fit1)
a1<-car::Anova(fit1, type = 3)

###Plot results
season_positions<-c("winter", "summer")
p_season<-ggplot(both_seasons, aes(season, Shannon)) + 
  geom_quasirandom(alpha=0.3, dodge=0.3) +
  stat_summary(fun=mean, geom='point', size=3, position=position_dodge(0.5))+
  stat_summary(fun.data=mean_cl_normal, geom='errorbar', width=0, size=1, position=position_dodge(0.5))+
  labs(x="Season", y="Shannon Diversity Index")+
  theme(plot.title = element_text(size=12, face="bold"), axis.title.x = element_text(size=12),axis.title.y = element_text(size=12)) + 
  theme(legend.title = element_text(color="black", size=12,face="bold"))+ guides(colour = guide_legend(order = 1),shape = guide_legend(order = 2))+
  theme(axis.text.x = element_text(color="black", size=12,face="bold"))+
  theme_bw()+
  scale_x_discrete(limits=season_positions)

## Same with Chao1 as the response variable
fit1_1<-lm(Chao1 ~ season + population, data=both_seasons)
vif(fit1_1)
summary(fit1_1)
a1_1<-car::Anova(fit1_1, type = 3)

## Model 2: season and population interaction
### Subset La Hiruela and Westerheide off as both are missing winter observations and the model won't work with them in the model
both_seasons<-subset(raredata, raredata$population != "Westerheide" & raredata$population != "La Hiruela")
table(both_seasons$population) ### Check that it worked
fit2<-lm(Shannon ~ population * season, data=both_seasons)
vif(fit2)
summary(fit2)
car::Anova(fit2, type = 3)

fit2_2<-lm(Chao1 ~ population * season, data=both_seasons)
vif(fit2_2)
summary(fit2_2)
car::Anova(fit2_2, type = 3)

## Model 3: Environmental factors associated with season and populations location
### Shannon
fit3<-lm(Shannon ~ latitude + body_condition + habitat + mean_temp + mean_rain + sex, data=raredata) ### NOT SIGNIFICANT
vif(fit3)
summary(fit3)
car::Anova(fit3, type = 3)

### Chao1
fit3_3<-lm(Chao1 ~ latitude + body_condition + habitat + mean_temp + mean_rain + sex, data=raredata) ### NOT SIGNIFICANT
vif(fit3_3)
summary(fit3_3)
car::Anova(fit3_3, type = 3)

### Replace body condition with weight
fit4<-lm(Shannon ~ latitude + weight + habitat + mean_temp + mean_rain + sex, data=raredata) ### NOT SIGNIFICANT
vif(fit4)
summary(fit4)
car::Anova(fit4, type = 3)

fit4_4<-lm(Chao1 ~ latitude + weight + habitat + mean_temp + mean_rain + sex, data=raredata) ### NOT SIGNIFICANT
vif(fit4_4)
summary(fit4_4)
car::Anova(fit4_4, type = 3)

## WINTER SPECIFIC ANALYSES

### Diet is followed based on winter feeding station records (birds were caught from the area with the feeders)
fit7<-lm(Shannon ~ latitude + body_condition + habitat + mean_temp + mean_rain + sex + diet, data=rarewinter)
vif(fit7)
summary(fit7)
car::Anova(fit7, type = 3)
##""Plot effect
plot_winter_habitat<-ggplot(rarewinter, aes(habitat, Shannon)) + 
  geom_quasirandom(alpha=0.3, dodge=0.3) +
  stat_summary(fun=mean, geom='point', size=3, position=position_dodge(0.5))+
  stat_summary(fun.data=mean_cl_normal, geom='errorbar', width=0, size=1, position=position_dodge(0.5))+
  labs(x=" ", y="Shannon Diversity Index")+
  theme(plot.title = element_text(size=12, face="bold"), axis.title.x = element_text(size=12),axis.title.y = element_text(size=12)) + 
  theme(axis.text.x = element_text(color="black", face="bold"))+
  theme(axis.title.y.left = element_text(size=12, face="bold"))+
  theme(axis.title.x.bottom = element_text(color="black", face="bold", size=12))+
  theme(axis.text.y = element_text(color="black", face="bold"))+
  theme(legend.title = element_text(color="black", size=12,face="bold"))+ guides(colour = guide_legend(order = 1),shape = guide_legend(order = 2))+
  theme(axis.text.x = element_text(color="black", size=12,face="bold"))+theme(axis.title.x = element_text(color="black", size=12,face="bold"))+
  theme(axis.text.y = element_text(color="black", size=12,face="bold"))+theme(axis.title.y = element_text(color="black", size=12,face="bold"))+
  ggtitle("Alpha diversity in two winter habitats")+
  theme(
    plot.title=element_text(family='', face='bold', colour='black', size=20)
  )

### Run same analysis with Chao1 as the response variable
fit7_7<-lm(Chao1 ~ latitude + body_condition + habitat + mean_temp + mean_rain + sex + diet, data=rarewinter)
vif(fit7_7)
summary(fit7_7)
car::Anova(fit7_7, type = 3)

### Replace body condition with weight in the model
fit9<-lm(Shannon ~ latitude + weight + habitat + mean_temp + mean_rain + sex + diet, data=rarewinter)
vif(fit9)
summary(fit9)
car::Anova(fit9, type = 3)

### Same model with Chao1
fit9_9<-lm(Chao1 ~ latitude + weight + habitat + mean_temp + mean_rain + sex + diet, data=rarewinter)
vif(fit9_9)
summary(fit9_9)
car::Anova(fit9_9, type = 3)

## SUMMER - same analyses as with winter dataset but no diet recorded during summer
## Model 11
fit11<-lm(Shannon ~ latitude + body_condition + habitat + mean_temp + mean_rain + sex, data = raresummer)
vif(fit11)
summary(fit11)
car::Anova(fit11, type = 3)

fit11_11<-lm(Chao1 ~ latitude + body_condition + habitat + mean_temp + mean_rain + sex, data = raresummer)
vif(fit11_11)
summary(fit11_11)
car::Anova(fit11_11, type = 3)

### Replace body condition with weight
fit12<-lm(Shannon ~ latitude + weight + habitat + mean_temp + mean_rain + sex, data = raresummer)
vif(fit12)
summary(fit12)
car::Anova(fit12, type = 3)

### Run the same with Chao1
fit12_12<-lm(Chao1 ~ latitude + weight + habitat + mean_temp + mean_rain + sex, data = raresummer)
vif(fit12_12)
summary(fit12_12)
car::Anova(fit12_12, type = 3)

## Additional plots

### Plot relative abundance on phylum level and one bar per population to see population variance
plot = filter_taxa(ps_winter, function(x) mean (x) > 0.3, TRUE)
plot
relative = transform_sample_counts(plot, function(x) x / sum(x))
relative
plot <- psmelt(relative)
glom <- tax_glom(relative, taxrank = "Phylum")
diversity <- psmelt(glom)
diversity$Phylum <- as.character(diversity$Phylum)
diversity$Phylum[diversity$Abundance < 0.3] <- " < 30% abundance"

####Specify the order of the bars in the chart - south to north
winter_positions<-c("La Hiruela", "Budapest region", "Westerheide", "Lund", "Tartu region", "Turku", "Jyvaskyla", "Oulu")
p <- ggplot(data=diversity, aes(x=region_factor, y=Abundance, fill=Phylum))

phylum <- p + geom_bar(aes(), stat = "identity", position="fill", na.rm = TRUE) + 
  scale_fill_viridis_d()+
  facet_wrap(~region_factor, scales= "free_x", nrow=1) +
  theme_classic() +
  labs(x = "Population", y = "Relative Abundance %\n") +
  theme(legend.position = "right", 
        strip.background = element_blank(), 
        axis.text.x.bottom = element_text(angle = -90, face="bold"))+
  scale_x_discrete(limits=winter_positions)

###Alpha plot per season with each population coloured
both_seasons$population <- factor(both_seasons$population, levels=c("Budapest region", "Lund", "Tartu region", "Turku", "Jyvaskyla", "Oulu"))
shannon7 <- ggplot(both_seasons, aes(x=season, y=Shannon, fill=population)) +
  theme(panel.background = element_rect(color="black",fill = "white"),panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
  ylim(0, 5.5)+geom_boxplot(outlier.shape = NA)+
  theme(axis.text=element_text(size=12, face="bold"))+ 
  xlab("Gut microbiome diversity among populations")+ylab("Shannon Diversity Index") + 
  theme(plot.title = element_text(size=12, face="bold"), axis.title.x = element_text(size=12),axis.title.y = element_text(size=12)) + 
  theme(axis.text.x = element_text(color="black", face="bold"))+
  theme(axis.title.y.left = element_text(size=12, face="bold"))+
  theme(legend.title = element_text(color="black", face="bold"))+
  theme(axis.title.x.bottom = element_text(color="black", face="bold", size=14))+
  theme(axis.text.y = element_text(color="black", face="bold"),legend.key = element_rect(fill = "white", size=12))+ labs(fill = "Population")+
  scale_fill_viridis_d()


## ---------------- BETA DIVERSITY -------------------- ##

### First make sure physeq object and metadata match the diversity analyses data --> Remove the samples that were deleted in rarefying + duplicates
### Example code with individual lines for each sample that I would like to remove:
samples_toRemove <- c("GT_7_S8_L002_R1_001.fastq", "GT_24_S25_L002_R1_001.fastq", "GT_48_S49_L002_R1_001.fastq",
                      "GT_186_S187_L002_R1_001.fastq", "GT_187_S188_L002_R1_001.fastq", "GT_282_S283_L002_R1_001.fastq",
                      "GT_304_S305_L002_R1_001.fastq", "GT_324_S325_L002_R1_001.fastq", "GT_268_S269_L002_R1_001.fastq",
                      "GT_284_S285_L002_R1_001.fastq", "GT_2_S3_L002_R1_001.fastq")
### Removes the samples from the physeq object
ps_beta<-subset_samples(physeq, !(sample_names %in% samples_toRemove))


### Read in richness data and check that variables are in correct format (numeric, categorical...)
betadata <- read_csv("betadata.csv", col_types = cols(Observed = col_number(), 
                                                      Chao1 = col_number(), Shannon = col_number(), 
                                                      latitude = col_number(), wing = col_number(), 
                                                      weight = col_number(), mean_temp = col_number(), 
                                                      mean_rain = col_number(), reads_sample = col_number(), 
                                                      phylogenetic_diversity = col_number()))

### Convert chr variables into numbers or factors depending on how they are in the data
betadata$sample_names<- factor(betadata$sample_names)
betadata$region<- factor(betadata$region)
betadata$season<- factor(betadata$season)
betadata$age<- factor(betadata$age)
betadata$diet<- factor(betadata$diet)
betadata$habitat<- factor(betadata$habitat)
betadata$sex<- factor(betadata$sex)
betadata$sample_names<- factor(betadata$sample_names)

attach(betadata)

## BETADISPERSION: tests for differences in variance between samples in the same group
### All
bray<-phyloseq::distance(ps_beta, method="bray")
## Test among-population differences
bray_all<-betadisper(bray, betadata$region)
permutest(bray_all)

### Season
bray_season<-betadisper(bray, betadata$season)
permutest(bray_season)

## PERMANOVA
### Tests which variables contribute significantly to the variation in microbiome communities. you can add the variables after the ~
### The most interesting part of this test is R2 value. This shows how much of the variation can be explained by
### the variable. If the variable is significant but the R2 value is super low, it is not a very interesting result

### Subset for between-season among-population comparison, because 2 populations were not recorded during winter
beta_both<-subset_samples(ps_beta, region_factor != "Westerheide" & region_factor != "La Hiruela")
betaboth<-subset(betadata, betadata$region != "Westerheide" & betadata$region != "La Hiruela")

perm<-how(nperm = 9999)
set.seed(1234)
beta_bray <- phyloseq::distance(beta_both, method = "bray")
## Model 1
adonis2(formula = phyloseq::distance(beta_both, permutations = perm, method = "bray")~region+season, data = betaboth)

## Model 2 - environmental factors
adonis2(formula = phyloseq::distance(beta_both, permutations = perm, method = "bray")~latitude+body_condition+habitat+mean_temp+mean_rain+sex, data = betaboth, na.action=na.exclude)

## Replace body condition with weight
adonis2(formula = phyloseq::distance(beta_both, permutations = perm, method = "bray")~latitude+weight+habitat+mean_temp+mean_rain+sex, data = betaboth, na.action=na.exclude)

## Then run the same models with winter and summer subsets to match the diversity analyses
### Make a subset of phyloseq object
beta_winter <- subset_samples(ps_beta, season == "winter")
beta_summer <- subset_samples(ps_beta, season == "summer")
### Make a subset of metadata
betawinter<-subset(betadata, betadata$season == "winter")
betasummer<-subset(betadata, betadata$season == "summer")

## WINTER - body condition
set.seed(2234)
adonis2(phyloseq::distance(beta_winter, method="bray")~latitude+body_condition+habitat+mean_temp+mean_rain+sex+diet, data=betawinter, na.action=na.exclude)

set.seed(2234)
## Replace body condition with weight
adonis2(phyloseq::distance(beta_winter, method="bray")~latitude+weight+habitat+mean_temp+mean_rain+sex+diet, data=betawinter, na.action=na.exclude)

set.seed(2234)
## SUMMER - with body_condition
adonis2(phyloseq::distance(beta_summer, method="bray")~latitude+body_condition+habitat+mean_temp+mean_rain+sex, data=betasummer, na.action=na.exclude)

set.seed(2234)
## Replace body condition with weight
adonis2(phyloseq::distance(beta_summer, method="bray")~latitude+weight+habitat+mean_temp+mean_rain+sex, data=betasummer, na.action=na.exclude)

## Make NMDS plots to visualise results
### Check consistency of results with different metrics: BC, Weighter unifrac and unweighted unifrac

season_wunifrac <- ordinate(ps_beta, method="NMDS", distance="wunifrac") ### weighted unifrac takes into account both absolute abundance and evenness of taxa --> so it is scaled
NMDS_bray <- ordinate(ps_beta, method="NMDS", distance="bray") ## The most robust of the ordinations

### Bray-Curtis NMDS
NMDS_bray_shannon<- plot_ordination(ps_beta, NMDS_bray) +theme(panel.border = element_rect(colour = "black", fill=NA, size=1),panel.background = element_rect(fill = "white"),panel.grid.major = element_blank(),panel.grid.minor = element_blank())+ 
  theme(text = element_text(size=10))+ geom_point(aes(color=region_factor, shape=season_factor), size=2) + theme(legend.title=element_blank())+ 
  scale_colour_viridis_d()+
  theme(legend.key=element_blank(), legend.text=element_text(color="black", size=12))+  labs(color="Population", shape="Season")+ 
  theme(legend.title = element_text(color="black", size=12,face="bold"))+ guides(colour = guide_legend(order = 1),shape = guide_legend(order = 2))+
  theme(axis.text.x = element_text(color="black", size=12,face="bold"))+
  theme(axis.text.y = element_text(color="black", size=12,face="bold"))+ggtitle("NMDS Bray-Curtis")+
  theme(
    plot.title=element_text(family='', face='bold', colour='black', size=26)
  )
### NMDS Weighted unifrac
season_wunifrac<- plot_ordination(ps_beta, season_wunifrac) +theme(panel.border = element_rect(colour = "black", fill=NA, size=1),panel.background = element_rect(fill = "white"),panel.grid.major = element_blank(),panel.grid.minor = element_blank())+ 
  theme(text = element_text(size=10))+ geom_point(aes(color=region_factor, shape=season_factor), size=2) + theme(legend.title=element_blank())+ 
  scale_colour_viridis_d()+
  theme(legend.key=element_blank(), legend.text=element_text(color="black", size=12))+  labs(color="Population", shape="Season")+ 
  theme(legend.title = element_text(color="black", size=12,face="bold"))+ guides(colour = guide_legend(order = 1),shape = guide_legend(order = 2))+
  theme(axis.text.x = element_text(color="black", size=12,face="bold"))+
  theme(axis.text.y = element_text(color="black", size=12,face="bold"))+ggtitle("NMDS Weighted UniFrac")+
  theme(
    plot.title=element_text(family='', face='bold', colour='black', size=26)
  )
### Add 95 % CI as ellipses to the plot if wanted
ellipse_bray <- NMDS_bray_shannon + stat_ellipse(aes(color=region_factor), type = "norm", linetype=2) + theme_bw()

### Winter Bray-Curtis
winter_bray <- ordinate(beta_winter, method="NMDS", distance="bray")

winter_ord_bray<- plot_ordination(beta_winter, winter_bray) +theme(panel.border = element_rect(colour = "black", fill=NA, size=1),panel.background = element_rect(fill = "white"),panel.grid.major = element_blank(),panel.grid.minor = element_blank())+ 
  theme(text = element_text(size=10))+ geom_point(aes(color=region_factor), size=2) + theme(legend.title=element_blank())+ 
  scale_colour_viridis_d()+
  theme(legend.key=element_blank(), legend.text=element_text(size=10))+  labs(color="Region")+ 
  theme(legend.title = element_text(size=10,face="bold"))+ guides(colour = guide_legend(order = 1),shape = guide_legend(order = 2))+
  theme(axis.text.x = element_text(color="black"))+
  theme(axis.text.y = element_text(color="black"))+ggtitle("Bray-Curtis")

NMDS_BC_winter<-winter_ord_bray + stat_ellipse(aes(color=region_factor), type = "norm", linetype=2) + theme_bw()

### Summer Bray-Curtis
summer_bray <- ordinate(beta_summer, method="NMDS", distance="bray")

summer_ord_bray<- plot_ordination(beta_summer, summer_bray) +theme(panel.border = element_rect(colour = "black", fill=NA, size=1),panel.background = element_rect(fill = "white"),panel.grid.major = element_blank(),panel.grid.minor = element_blank())+ 
  theme(text = element_text(size=10))+ geom_point(aes(color=region_factor), size=2) + theme(legend.title=element_blank())+ 
  scale_colour_viridis_d()+
  theme(legend.key=element_blank(), legend.text=element_text(size=10))+  labs(color="Region")+ 
  theme(legend.title = element_text(size=10,face="bold"))+ guides(colour = guide_legend(order = 1),shape = guide_legend(order = 2))+
  theme(axis.text.x = element_text(color="black"))+
  theme(axis.text.y = element_text(color="black"))+ggtitle("Bray-Curtis")

NMDS_BC_summer<-summer_ord_bray + stat_ellipse(aes(color=region_factor), type = "norm", linetype=2) + theme_bw()

### Checked NMDS BC plots for between-season comparisons as well - the samples did not cluster season-specifically either


## DESEQ2 - Differential abundance analysis for populations that have both winter and summer samples

### Subset pairs to compare: Tartu, Budapest, Jyväskylä, Oulu, Lund, Turku
estonia<-subset_samples(physeq, region == "Estonia") 
hungary<-subset_samples(physeq, region == "Hungary") 
jkl<-subset_samples(physeq, region == "Jyvaskyla") 
oulu<-subset_samples(physeq, region == "Oulu")
lund<-subset_samples(physeq, region == "Lund") 
turku<-subset_samples(physeq, region == "Turku")

### Example of analysis for one pair
#### Tartu

estonia_dds = phyloseq_to_deseq2(estonia, ~ season) #whatever variable you want to look at
#### calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(estonia_dds), 1, gm_mean)
estonia_dds = estimateSizeFactors(estonia_dds, geoMeans = geoMeans)
estonia_dds = DESeq(estonia_dds, fitType="local")

#### plot results
theme_set(theme_bw())

#### winter vs summer
#### left one is positive and right one is negative log2fold
estonia_res<- results(estonia_dds, contrast=c("season","winter","summer")) # which levels of the variable you want to contrast. For ex. enlarged and reduced within variable compartment
estonia_res= estonia_res[order(estonia_res$padj, na.last=NA), ]
alpha = 0.01 # set this to 0.05 to for significance. I use 0.01 as 0.05 gave too many genera to plot
estonia_tab = estonia_res[estonia_res$padj < alpha, ]
estonia_tab = cbind(as(estonia_tab, "data.frame"), as(tax_table(estonia)[rownames(estonia_tab), ], "matrix"))
estonia_x = tapply(estonia_tab$log2FoldChange, estonia_tab$Genus, function(estonia_x) max(estonia_x))
estonia_x = sort(estonia_x, TRUE)
estonia_tab$Genus = factor(as.character(estonia_tab$Genus), levels=names(estonia_x))

### Results table
write_xlsx(estonia_tab,"~/Desktop/popcor/estonia.xlsx")

summary(estonia_tab)
#### winter is on the right and summer on the left of the graph
estonia_plot<- ggplot(estonia_tab, aes(y=Order, x=log2FoldChange, color=Phylum)) + 
  geom_vline(xintercept = 0.0, color = "gray", linewidth = 0.5) +
  geom_point(size=3) +theme(panel.border = element_rect(colour = "black", fill=NA, linewidth=1),panel.background = element_rect(fill = "white"))+ 
  theme(text = element_text(size=10))+
  theme(axis.text.x = element_text(hjust = 0, vjust=0.5, size=10, color="black"), axis.text.y = element_text(size=11, color="black")) +
  ggtitle(" ")+
  scale_colour_viridis_d()

estonia_plot

# Hungary
hungary_dds = phyloseq_to_deseq2(hungary, ~ season) #whatever variable you want to look at
# calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(hungary_dds), 1, gm_mean)
hungary_dds = estimateSizeFactors(hungary_dds, geoMeans = geoMeans)
hungary_dds = DESeq(hungary_dds, fitType="local")

#plot results
theme_set(theme_bw())

#### winter vs summer
## left one is positive and right one is negative log2fold
hungary_res<- results(hungary_dds, contrast=c("season","winter","summer")) # which levels of the variable you want to contrast. For ex. enlarged and reduced within variable compartment
hungary_res= hungary_res[order(hungary_res$padj, na.last=NA), ]
alpha = 0.01 # set this to 0.05 to for significance. I use 0.01 as 0.05 gave too many genera to plot
hungary_tab = hungary_res[hungary_res$padj < alpha, ]
hungary_tab = cbind(as(hungary_tab, "data.frame"), as(tax_table(hungary)[rownames(hungary_tab), ], "matrix"))
hungary_x = tapply(hungary_tab$log2FoldChange, hungary_tab$Genus, function(hungary_x) max(hungary_x))
hungary_x = sort(hungary_x, TRUE)
hungary_tab$Genus = factor(as.character(hungary_tab$Genus), levels=names(hungary_x))

# Results table
write_xlsx(hungary_tab,"~/Desktop/popcor/hungary.xlsx")

summary(hungary_tab)
## winter is on the right and summer on the left of the graph
hungary_plot<- ggplot(hungary_tab, aes(y=Order, x=log2FoldChange, color=Phylum)) + 
  geom_vline(xintercept = 0.0, color = "gray", linewidth = 0.5) +
  geom_point(size=3) +theme(panel.border = element_rect(colour = "black", fill=NA, linewidth=1),panel.background = element_rect(fill = "white"))+ 
  theme(text = element_text(size=10))+
  theme(axis.text.x = element_text(hjust = 0, vjust=0.5, size=10, color="black"), axis.text.y = element_text(size=11, color="black")) +
  ggtitle(" ")+
  scale_colour_viridis_d()
hungary_plot

# Jyväskylä
jkl_dds = phyloseq_to_deseq2(jkl, ~ season) #whatever variable you want to look at
# calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(jkl_dds), 1, gm_mean)
jkl_dds = estimateSizeFactors(jkl_dds, geoMeans = geoMeans)
jkl_dds = DESeq(jkl_dds, fitType="local")

#plot results
theme_set(theme_bw())

#### winter vs summer
## left one is positive and right one is negative log2fold
jkl_res<- results(jkl_dds, contrast=c("season","winter","summer")) # which levels of the variable you want to contrast. For ex. enlarged and reduced within variable compartment
jkl_res= jkl_res[order(jkl_res$padj, na.last=NA), ]
alpha = 0.01 # set this to 0.05 to for significance. I use 0.01 as 0.05 gave too many genera to plot
jkl_tab = jkl_res[jkl_res$padj < alpha, ]
jkl_tab = cbind(as(jkl_tab, "data.frame"), as(tax_table(jkl)[rownames(jkl_tab), ], "matrix"))
jkl_x = tapply(jkl_tab$log2FoldChange, jkl_tab$Genus, function(jkl_x) max(jkl_x))
jkl_x = sort(jkl_x, TRUE)
jkl_tab$Genus = factor(as.character(jkl_tab$Genus), levels=names(jkl_x))

# Results table
write_xlsx(jkl_tab,"~/Desktop/popcor/jkl.xlsx")

summary(jkl_tab)
## winter is on the right and summer on the left of the graph
jkl_plot<- ggplot(jkl_tab, aes(y=Order, x=log2FoldChange, color=Phylum)) + 
  geom_vline(xintercept = 0.0, color = "gray", linewidth = 0.5) +
  geom_point(size=3) +theme(panel.border = element_rect(colour = "black", fill=NA, linewidth=1),panel.background = element_rect(fill = "white"))+ 
  theme(text = element_text(size=10))+
  theme(axis.text.x = element_text(hjust = 0, vjust=0.5, size=10, color="black"), axis.text.y = element_text(size=11, color="black")) +
  ggtitle(" ")+
  scale_colour_viridis_d()
jkl_plot

# Oulu
oulu_dds = phyloseq_to_deseq2(oulu, ~ season) #whatever variable you want to look at
# calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(oulu_dds), 1, gm_mean)
oulu_dds = estimateSizeFactors(oulu_dds, geoMeans = geoMeans)
oulu_dds = DESeq(oulu_dds, fitType="local")

#plot results
theme_set(theme_bw())

#### winter vs summer
## left one is positive and right one is negative log2fold
oulu_res<- results(oulu_dds, contrast=c("season","winter","summer")) # which levels of the variable you want to contrast. For ex. enlarged and reduced within variable compartment
oulu_res= oulu_res[order(oulu_res$padj, na.last=NA), ]
alpha = 0.01 # set this to 0.05 to for significance. I use 0.01 as 0.05 gave too many genera to plot
oulu_tab = oulu_res[oulu_res$padj < alpha, ]
oulu_tab = cbind(as(oulu_tab, "data.frame"), as(tax_table(oulu)[rownames(oulu_tab), ], "matrix"))
oulu_x = tapply(oulu_tab$log2FoldChange, oulu_tab$Genus, function(oulu_x) max(oulu_x))
oulu_x = sort(oulu_x, TRUE)
oulu_tab$Genus = factor(as.character(oulu_tab$Genus), levels=names(oulu_x))

# Results table
write_xlsx(oulu_tab,"~/Desktop/popcor/oulu.xlsx")

summary(oulu_tab)
## winter is on the right and summer on the left of the graph
oulu_plot<- ggplot(oulu_tab, aes(y=Order, x=log2FoldChange, color=Phylum)) + 
  geom_vline(xintercept = 0.0, color = "gray", linewidth = 0.5) +
  geom_point(size=3) +theme(panel.border = element_rect(colour = "black", fill=NA, linewidth=1),panel.background = element_rect(fill = "white"))+ 
  theme(text = element_text(size=10))+
  theme(axis.text.x = element_text(hjust = 0, vjust=0.5, size=10, color="black"), axis.text.y = element_text(size=11, color="black")) +
  ggtitle(" ")+
  scale_colour_viridis_d()
oulu_plot

# Sweden
lund_dds = phyloseq_to_deseq2(lund, ~ season) #whatever variable you want to look at
# calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(lund_dds), 1, gm_mean)
lund_dds = estimateSizeFactors(lund_dds, geoMeans = geoMeans)
lund_dds = DESeq(lund_dds, fitType="local")

#plot results
theme_set(theme_bw())

#### winter vs summer
## left one is positive and right one is negative log2fold
lund_res<- results(lund_dds, contrast=c("season","winter","summer")) # which levels of the variable you want to contrast. For ex. enlarged and reduced within variable compartment
lund_res= lund_res[order(lund_res$padj, na.last=NA), ]
alpha = 0.01 # set this to 0.05 to for significance. I use 0.01 as 0.05 gave too many genera to plot
lund_tab = lund_res[lund_res$padj < alpha, ]
lund_tab = cbind(as(lund_tab, "data.frame"), as(tax_table(lund)[rownames(lund_tab), ], "matrix"))
lund_x = tapply(lund_tab$log2FoldChange, lund_tab$Genus, function(lund_x) max(lund_x))
lund_x = sort(lund_x, TRUE)
lund_tab$Genus = factor(as.character(lund_tab$Genus), levels=names(lund_x))

# Results table
write_xlsx(lund_tab,"~/Desktop/popcor/lund.xlsx")

summary(lund_tab)
## winter is on the right and summer on the left of the graph
lund_plot<- ggplot(lund_tab, aes(y=Order, x=log2FoldChange, color=Phylum)) + 
  geom_vline(xintercept = 0.0, color = "gray", linewidth = 0.5) +
  geom_point(size=3) +theme(panel.border = element_rect(colour = "black", fill=NA, linewidth=1),panel.background = element_rect(fill = "white"))+ 
  theme(text = element_text(size=10))+
  theme(axis.text.x = element_text(hjust = 0, vjust=0.5, size=10, color="black"), axis.text.y = element_text(size=11, color="black")) +
  ggtitle(" ")+
  scale_colour_viridis_d()
lund_plot

# Turku
turku_dds = phyloseq_to_deseq2(turku, ~ season) #whatever variable you want to look at
# calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(turku_dds), 1, gm_mean)
turku_dds = estimateSizeFactors(turku_dds, geoMeans = geoMeans)
turku_dds = DESeq(turku_dds, fitType="local")

#plot results
theme_set(theme_bw())

#### winter vs summer
## left one is positive and right one is negative log2fold
turku_res<- results(turku_dds, contrast=c("season","winter","summer")) # which levels of the variable you want to contrast. For ex. enlarged and reduced within variable compartment
turku_res= turku_res[order(turku_res$padj, na.last=NA), ]
alpha = 0.01 # set this to 0.05 to for significance. I use 0.01 as 0.05 gave too many genera to plot
turku_tab = turku_res[turku_res$padj < alpha, ]
turku_tab = cbind(as(turku_tab, "data.frame"), as(tax_table(turku)[rownames(turku_tab), ], "matrix"))
turku_x = tapply(turku_tab$log2FoldChange, turku_tab$Genus, function(turku_x) max(turku_x))
turku_x = sort(turku_x, TRUE)
turku_tab$Genus = factor(as.character(turku_tab$Genus), levels=names(turku_x))

# Results table
write_xlsx(turku_tab,"~/Desktop/popcor/turku.xlsx")

summary(turku_tab)
## winter is on the right and summer on the left of the graph
turku_plot<- ggplot(turku_tab, aes(y=Order, x=log2FoldChange, color=Phylum)) + 
  geom_vline(xintercept = 0.0, color = "gray", linewidth = 0.5) +
  geom_point(size=3) +theme(panel.border = element_rect(colour = "black", fill=NA, linewidth=1),panel.background = element_rect(fill = "white"))+ 
  theme(text = element_text(size=10))+
  theme(axis.text.x = element_text(hjust = 0, vjust=0.5, size=10, color="black"), axis.text.y = element_text(size=11, color="black")) +
  ggtitle(" ")+
  scale_colour_viridis_d()
turku_plot

# Merge plots
deseq_comparisons <- ggarrange(estonia_plot, hungary_plot, jkl_plot, oulu_plot, lund_plot, turku_plot, 
                               labels = c("Tartu region", "Budapest region", "Jyväskylä", "Oulu", "Lund", "Turku"),
                               ncol = 2, nrow = 3)
tiff(filename = "deseq2plot.tiff", units ="in", width = 25, height = 15, res = 300)


